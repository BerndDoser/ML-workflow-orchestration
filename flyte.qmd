# ![](images/favicon-flyte-docs.webp){.logo_h1_inline} Flyte
## ![](images/favicon-flyte-docs.webp){.logo_h2_inline} Flyte

- [Flyte](https://flyte.org/) is a highly scalable cloud-native workflow orchestration platform on top of containers and kubernetes
- Member of the [Linux Foundation AI & Data](https://lfaidata.foundation/projects/flyte/)


## Flyte Nomenclature

- **Project**: A collection of workflows, tasks, and executions
- **Domain**: Deployment level (`development`, `staging`, and `production`)
- **Workflow**: A collection (directed acyclic graph) of tasks
- **Task**: Fully independent unit of work
- **Execution**: A run of a task or workflow
- **Launch Plan**: A scheduled execution of a workflow


## Flyte Test Setup

![](images/flyte-test-setup.svg){fig-align="center"}

Thanks to Martin Wendt (ITS) for providing a comprehensive testing setup including Kubernetes (k3s), Flyte, and MinIO.


## Flyte Command-line Interface

- Start a demo cluster on your local machine
- Create a new project
```{.bash code-line-numbers="false"}
flytectl create project --name seminar --id seminar --description "seminar showcases"
```
- Manage workflows, tasks, and executions


## Flyte Tasks

- Tasks are strongly typed (see [Flyte Type Mapping](https://docs.flyte.org/en/latest/user_guide/data_types_and_io/index.html#data-types-and-io))
- Tasks are regular Python function decorated with `@task` 
- Tasks are designed to be idempotent (multiple executions don't change the result).

```python
from typing import List
from flytekit import task

@task
def mean(values: List[float]) -> float:
    return sum(values) / len(values)
```

## Flyte Workflows

Workflows are used to structure the task execution graph 

<!-- ```python
workflow_outputs = typing.NamedTuple(
    "WorkflowOutputs",
    simwords=Dict[str, float],
    distance=float,
    topics=Dict[int, List[str]],
)
``` -->

::: {style="font-size: 80%;"}
``` {.python}
@task
def generate_processed_corpus() -> List[List[str]]:

@workflow
def nlp_workflow(target_word: str = "computer") -> [Dict[str, float], float, Dict[int, List[str]]]:
    corpus = generate_processed_corpus()
    model_wv = train_word2vec_model(training_data=corpus, hyperparams=Word2VecModelHyperparams())
    lda_topics = train_lda_model(corpus=corpus, hyperparams=LDAModelHyperparams())
    similar_words = word_similarities(model_ser=model_wv.model, word=target_word)
    distance = word_movers_distance(model_ser=model_wv.model)
    return similar_words, distance, lda_topics
```
:::

::: aside
[Source](https://docs.flyte.org/en/latest/flytesnacks/examples/nlp_processing/word2vec_and_lda.html)
:::

## Containerized Tasks

A Flyte task operates within its own container and runs on a Kubernetes pod

![](images/union_tasks.png){fig-align="center"}


## Container Image Specifications

- Customize the container image without a Dockerfile
- Container image is build at registration and pushed to a container registry

```python
custom_image = ImageSpec(
    packages=["torch", "torchvision", "lightning"],
    apt_packages=["curl", "wget"],
    cuda="12.6",
    python_version="3.12",
    registry="registry.h-its.org/doserbd/flyte",
)
```


## FlyteConsole (WebUI)

- Launch and relaunch tasks and workflows
- View versioned tasks and workflows
- Inspect executions through inputs, outputs, logs, and graphs
- Clone and recover executions


# [Flyte Demo](https://github.com/BerndDoser/flyte-mnist)

<!-- - [PyTorch MNIST Classifier](https://docs.flyte.org/en/latest/flytesnacks/examples/mnist_classifier/pytorch_single_node_and_gpu.html) -->
