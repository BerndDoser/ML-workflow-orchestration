## Flyte

[Flyte](https://flyte.org/) is a workflow orchestration platform using Kubernetes and S3 storage.

## Flyte Structure

- **Project**: A collection of workflows, tasks, and executions.
- **Domain**: Deployment level (`development`, `staging`, and `production`)
- **Workflow**: A collection (directed acyclic graph) of tasks.
- **Task**: Fully independent unit of work.
- **Execution**: A run of a workflow.


## Flyte Command-line Interface

- Start a demo cluster on your local machine
- Create a new project
```{.bash code-line-numbers="false"}
flytectl create project --name seminar --id seminar --description "seminar showcases"
```
- Manage workflows, tasks, and executions


## Flyte Tasks

- Tasks are strongly typed (See [Flyte Type Mapping](https://docs.flyte.org/en/latest/user_guide/data_types_and_io/index.html#data-types-and-io))
- Tasks are regular Python function decorated with `@task` 
- Tasks are designed to be idempotent (multiple executions don't change the result).

```python
from typing import List
from flytekit import task

@task
def mean(values: List[float]) -> float:
    return sum(values) / len(values)
```

## Containerized Tasks

A Flyte task operates within its own container and runs on a Kubernetes pod

![](images/union_tasks.png)


## ImageSpec

- Customize the container image without a Dockerfile.
- Container image is build at registration and pushed to the container registry.

```python
custom_image = ImageSpec(
    packages=["torch", "torchvision", "lightning"],
    apt_packages=["curl", "wget"],
    cuda="12.6",
    python_version="3.12",
    registry="registry.h-its.org/doserbd/flyte",
)
```

## Container Task
