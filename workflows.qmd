## Motivated by [SPACE CoE](https://www.space-coe.eu/)

![](images/SPACE_logo.png){.absolute top=-20 right=0 width=200}

::: {.fs34}
**Goal**: Astrophysical simulations for exascale computing\
**Challenge**: Analyze large-size simulation data (~ Petabytes)\
**Solution**: Efficient ML-based workflows using dimensionality reduction
:::

::: {layout='[1,2.4,0.7]'}
::: n1

**Input**

![](images/illustris.png)

::: {.fs20}
::: {.callout-note icon=false}

## Simulation Data (~ Petabytes)

Time snapshots storing particle positions, velocities, and other properties, e.g. from OpenGADGET (IllustrisTNG)

:::
:::
:::

::: n2
**Workflow**

![](images/projectx.svg)
:::

::: n3
**Output**

![](images/P404_f2.png)

::: {.fs20}
Spherinator & HiPSter

[space.h-its.org](https://space.h-its.org/)
:::
:::
:::

::: aside
K. L. Polsterer, B. Doser, A. Fehlner and S. Trujillo-Gomez [ADASS (2024)]().
:::

<!-- ![](images/Space-partners-new.png){fig-align="center"} -->


## Why Workflow Orchestration?

::: {.incremental}

- **Reproducibility**: Ensure your experiments are reproducible by tracking the code, data, model, and environment.
- **Resource management**: Manage resources efficiently by running tasks in parallel and optimizing resource usage.
- **Scalability**: Scale your workflows to handle large amount of data and complex pipelines.
- **Monitoring**: Track the progress of workflows and monitor their performance and results.
- **Collaboration**: Enable collaboration between team members by sharing code, data, and results.

:::


## Requirements on Workflows Orchestration

  - Define execution requirements (e.g. GPUs, CPUs, memory)
  - Control runtime environment with containers
  - Orchestration features
    - Parallelization: Run independent tasks automatically in parallel 
    - Caching: Avoid recomputing successful tasks
    - Nesting: Reuse workflows as tasks
    - Looping: Repeat tasks based on conditions
    - Scattering: Distribute data to multiple tasks
    - Conditionals: Branching based on conditions


## Machine Learning Workflow Example

![](images/ml-workflow-example.svg){fig-align="center"}


## Options to Generate a Workflow

- General purpose programming languages (e.g Python)
- Domain specific language (e.g. [Common Workflow Language](https://www.commonwl.org/))
- Graphical user interface (e.g. [ReactFlow](https://reactflow.dev/) @ [fal.ai](https://fal.ai/dashboard))

![](images/fal_ai.png){fig-align="center"}
